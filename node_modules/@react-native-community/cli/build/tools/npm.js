"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNpmRegistryUrl = void 0;
exports.getNpmVersionIfAvailable = getNpmVersionIfAvailable;
exports.isProjectUsingNpm = isProjectUsingNpm;
exports.npmResolveConcreteVersion = npmResolveConcreteVersion;
function _child_process() {
  const data = require("child_process");
  _child_process = function () {
    return data;
  };
  return data;
}
function _findUp() {
  const data = _interopRequireDefault(require("find-up"));
  _findUp = function () {
    return data;
  };
  return data;
}
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function getNpmVersionIfAvailable() {
  let npmVersion;
  try {
    // execSync returns a Buffer -> convert to string
    npmVersion = ((0, _child_process().execSync)('npm --version', {
      stdio: [0, 'pipe', 'ignore']
    }).toString() || '').trim();
    return npmVersion;
  } catch (error) {
    return null;
  }
}
function isProjectUsingNpm(cwd) {
  return _findUp().default.sync('package-lock.json', {
    cwd
  });
}
const getNpmRegistryUrl = (() => {
  // Lazily resolve npm registry url since it is only needed when initializing a
  // new project.
  let registryUrl = '';
  return () => {
    if (!registryUrl) {
      try {
        registryUrl = (0, _child_process().execSync)('npm config get registry --workspaces=false --include-workspace-root').toString().trim();
      } catch {
        registryUrl = 'https://registry.npmjs.org/';
      }
    }
    return registryUrl;
  };
})();

/**
 * Convert an npm tag to a concrete version, for example:
 * - next -> 0.75.0-rc.0
 * - nightly -> 0.75.0-nightly-20240618-5df5ed1a8
 */
exports.getNpmRegistryUrl = getNpmRegistryUrl;
async function npmResolveConcreteVersion(packageName, tagOrVersion) {
  const url = new URL(getNpmRegistryUrl());
  url.pathname = `${packageName}/${tagOrVersion}`;
  const resp = await fetch(url);
  if ([200,
  // OK
  301,
  // Moved Permanemently
  302,
  // Found
  304,
  // Not Modified
  307,
  // Temporary Redirect
  308 // Permanent Redirect
  ].indexOf(resp.status) === -1) {
    throw new Error(`Unknown version ${packageName}@${tagOrVersion}`);
  }
  const json = await resp.json();
  return json.version;
}

//# sourceMappingURL=/Users/thymikee/Developer/oss/rncli/packages/cli/build/tools/npm.js.map